// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PERMISSIONS {
  OWNER
  VIEW_USER
  DELETE_USER
  EDIT_USER
  VIEW_ALL_USERS
  BAN_USER
  UNBAN_USER

  CREATE_SCRIPTS
  EDIT_SCRIPTS
  DELETE_SCRIPTS

  MANAGE_LICENSES

  VIEW_CUSTOMERS
  BAN_CUSTOMERS
}

model User {
  id       Int    @id @default(autoincrement()) @db.Integer
  name     String @unique @db.VarChar(25)
  email    String @unique @db.VarChar(75)
  password String @db.VarChar(256)

  permissions PERMISSIONS[]
  banned      Boolean       @default(false)

  avatar_url String? @db.VarChar(255)
  bio        String? @db.VarChar(255)

  // Timestamps
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(6)

  owned_shops      Shop[]
  shop_permissions UserShopPermission[]

  // License
  licenses License[]

  subscriptions   Subscription[]
  stripe_sessions StripeSession[]
}

model Shop {
  id          Int     @id @default(autoincrement()) @db.Integer
  name        String  @unique @db.VarChar(25)
  description String? @db.Text
  image       String? @db.Text
  color       String? @db.VarChar(20)

  owner    User @relation(fields: [owner_id], references: [id])
  owner_id Int  @db.Integer

  user_permissions UserShopPermission[]
  scripts          Script[]

  subscriptions Subscription[]

  created_at      DateTime         @default(now()) @db.Timestamp(6)
  updated_at      DateTime         @default(now()) @updatedAt @db.Timestamp(6)
  stripe_sessions StripeSession[]
}

model UserShopPermission {
  id      Int  @id @default(autoincrement()) @db.Integer
  user    User @relation(fields: [user_id], references: [id])
  user_id Int  @db.Integer

  shop    Shop @relation(fields: [shop_id], references: [id])
  shop_id Int  @db.Integer

  permissions PERMISSIONS[]
}

model Script {
  id      Int  @id @default(autoincrement()) @db.Integer
  shop    Shop @relation(fields: [shop_id], references: [id])
  shop_id Int  @db.Integer

  licenses License[]

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(6)
}

model License {
  id        Int    @id @default(autoincrement()) @db.Integer
  user      User   @relation(fields: [user_id], references: [id])
  user_id   Int    @db.Integer
  script    Script @relation(fields: [script_id], references: [id])
  script_id Int    @db.Integer

  ips String[]

  @@index([user_id, script_id])
}

model Subscription {
  id                         Int             @id @default(autoincrement()) @db.Integer
  user                       User            @relation(fields: [user_id], references: [id])
  user_id                    Int             @db.Integer
  shop                       Shop            @relation(fields: [shop_id], references: [id])
  shop_id                    Int             @db.Integer
  
  stripe_price_id            String          @db.VarChar(255)
  stripe_customer_id         String          @db.VarChar(255)
  stripe_subscription_id     String          @db.VarChar(255)
  stripe_subscription_status String          @db.VarChar(255)
  created_at                 DateTime        @default(now()) @db.Timestamp(6)
  updated_at                 DateTime        @default(now()) @updatedAt @db.Timestamp(6)
  StripeSessions             StripeSession[]
}

model StripeSession {
  id                Int           @id @default(autoincrement()) @db.Integer
  stripe_session_id String        @unique @db.VarChar(255)
  user              User          @relation(fields: [user_id], references: [id])
  user_id           Int           @db.Integer
  shop              Shop          @relation(fields: [shop_id], references: [id])
  shop_id           Int           @db.Integer
  subscription      Subscription? @relation(fields: [subscription_id], references: [id])
  subscription_id   Int?          @db.Integer
  created_at        DateTime      @default(now()) @db.Timestamp(6)
  updated_at        DateTime      @default(now()) @updatedAt @db.Timestamp(6)
}
